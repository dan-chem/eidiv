"""
Django settings for eidiv project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Projektbasis und .env
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(BASE_DIR / ".env")

# kleine Helfer
def split_csv(name: str, default: str = "") -> list[str]:
    return [x.strip() for x in os.environ.get(name, default).split(",") if x.strip()]

# Sicherheit
SECRET_KEY = os.environ.get("SECRET_KEY", "django-insecure-...")  # TODO: in .env pflegen

# Debug
DEBUG = os.environ.get("DEBUG", "1") == "1"

# Hosts
ALLOWED_HOSTS = (
    [h for h in split_csv("ALLOWED_HOSTS")]
    if not DEBUG else []
)

# Site/Origins
SITE_URL = os.environ.get("SITE_URL", "").strip()

# CSRF Trusted Origins:
# - nimmt SITE_URL (falls Schema vorhanden)
# - plus beliebige weitere Origins aus .env (z. B. http://192.168.111.130:8000)
CSRF_TRUSTED_ORIGINS = []
if SITE_URL.startswith(("http://", "https://")):
    CSRF_TRUSTED_ORIGINS.append(SITE_URL)

CSRF_TRUSTED_ORIGINS += split_csv(
    "CSRF_TRUSTED_ORIGINS",  # z. B. "http://192.168.111.130:8000,http://192.168.111.112"
)

# Static
STATIC_URL = "/static/"
STATICFILES_DIRS = [BASE_DIR / "static"]
STATIC_ROOT = BASE_DIR / "staticfiles"

# Proxy-Setup (NPM setzt X-Forwarded-Proto/Host)
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
USE_X_FORWARDED_HOST = True

# Secure-Cookies: standardmäßig bei https (SITE_URL), aber via .env überschreibbar
# Für lokalen IP-Zugriff über http setze in .env: USE_SECURE_COOKIES=0
USE_SECURE_COOKIES = os.environ.get(
    "USE_SECURE_COOKIES",
    "1" if SITE_URL.startswith("https://") else "0"
) == "1"

SESSION_COOKIE_SECURE = USE_SECURE_COOKIES
CSRF_COOKIE_SECURE = USE_SECURE_COOKIES

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core',
    'einsatz',
    'dienst',
    'pdfs',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # <-- neu
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = 'eidiv.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],  # globaler Templates-Ordner
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'eidiv.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'de-de'

TIME_ZONE = 'Europe/Berlin'

USE_I18N = True

USE_TZ = True

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'index'
LOGOUT_REDIRECT_URL = 'index'

# E-Mail: Defaults
DEFAULT_FROM_EMAIL = os.environ.get("DEFAULT_FROM_EMAIL", "eidiv@localhost")
SERVER_EMAIL = os.environ.get("SERVER_EMAIL", DEFAULT_FROM_EMAIL)   # für Fehler-Mails
EMAIL_SUBJECT_PREFIX = os.environ.get("EMAIL_SUBJECT_PREFIX", "[EiDiV] ")

EMAIL_TIMEOUT = int(os.environ.get("EMAIL_TIMEOUT", "20"))

if DEBUG:
    # Alle Mails gehen in die Konsole (zum Testen)
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
else:
    # SMTP-Backend
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
    EMAIL_HOST = os.environ.get("EMAIL_HOST", "smtp.example.org")
    EMAIL_PORT = int(os.environ.get("EMAIL_PORT", "587"))
    EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER", "")
    EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD", "")
    EMAIL_USE_TLS = os.environ.get("EMAIL_USE_TLS", "1") == "1"
    EMAIL_USE_SSL = os.environ.get("EMAIL_USE_SSL", "0") == "1"
    # Achtung: TLS und SSL nicht gleichzeitig aktivieren

